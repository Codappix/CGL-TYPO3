<?xml version="1.0"?>
<ruleset name="CGL-TYPO3">
    <!-- Base rules -->
    <rule ref="CGL-PHP"/>

    <!-- Exclude third party code -->
    <exclude-pattern>*/typo3/*</exclude-pattern>

    <!-- Arrays -->
    <rule ref="Squiz.Arrays.ArrayBracketSpacing" />

    <!-- Classes -->
    <rule ref="TYPO3SniffPool.Classes.LowercaseClassKeywords" />
    <rule ref="Squiz.Classes.SelfMemberReference" />
    <rule ref="Generic.Classes.DuplicateClassName" />

    <!-- CodeAnalysis -->
    <rule ref="Generic.CodeAnalysis.ForLoopWithTestFunctionCall" />
    <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement" />
    <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier" />
    <rule ref="Generic.CodeAnalysis.EmptyStatement" />

    <!-- Commenting -->
    <rule ref="PEAR.Commenting.InlineComment" />
    <rule ref="TYPO3SniffPool.Commenting.DoubleSlashCommentsInNewLine" />
    <rule ref="TYPO3SniffPool.Commenting.ValidCommentLineLength" />
    <rule ref="TYPO3SniffPool.Commenting.DocComment">
        <!-- As we also can have things like @see before param, this makes no sense. -->
        <exclude name="TYPO3SniffPool.Commenting.DocComment.ParamNotFirst" />
        <!-- We don't force commenting methods, as it's obvious most of the time if you're using good method names. -->
        <exclude name="TYPO3SniffPool.Commenting.DocComment.MissingShort" />
    </rule>

    <rule ref="TYPO3SniffPool.Commenting.FileComment" />
    <rule ref="TYPO3SniffPool.Commenting.FileComment">
        <exclude-pattern>ext_emconf.php</exclude-pattern>
        <exclude-pattern>ext_tables.php</exclude-pattern>
        <exclude-pattern>ext_localconf.php</exclude-pattern>

        <!-- As we use the real GNU license, perhaps we will add an own sniff. -->
        <exclude name="TYPO3SniffPool.Commenting.FileComment.NoCopyrightFound" />
        <!-- As we use the real GNU license, perhaps we will add an own sniff. -->
        <exclude name="TYPO3SniffPool.Commenting.FileComment.CommentTooLong" />
    </rule>

    <rule ref="TYPO3SniffPool.Commenting.ClassComment">
        <!-- As we find authors using version control. -->
        <exclude name="TYPO3SniffPool.Commenting.ClassComment.NoAuthorTag" />
        <!-- We don't force commenting classes, as it's obvious most of the time if you're using good method names. -->
        <exclude name="TYPO3SniffPool.Commenting.ClassComment.Missing" />
    </rule>
    <!--
         As TYPO3 will first check style and then missing ... we have to use this
         We don't add comments to repositories, as it's obvious what they are doing.
    -->
    <rule ref="TYPO3SniffPool.Commenting.ClassComment.WrongStyle">
        <exclude-pattern>*Classes/Domain/Repository/*Repository.php</exclude-pattern>
        <exclude-pattern>**/Migration/Model/**</exclude-pattern>
    </rule>

    <rule ref="TYPO3SniffPool.Commenting.FunctionComment">
        <!-- Not necessary for obvious parameters, we use PHP 7.x type hints. -->
        <exclude name="TYPO3SniffPool.Commenting.FunctionComment.MissingParamTag" />
        <!-- We don't force commenting parameter, as it's obvious most of the time if you're using good variable names. -->
        <exclude name="TYPO3SniffPool.Commenting.FunctionComment.MissingParamComment" />
        <exclude name="TYPO3SniffPool.Commenting.FunctionComment.InvalidTypeHint" />
        <!-- As we make use of PHP TypeHints. Also not all methods have a return. -->
        <exclude name="TYPO3SniffPool.Commenting.FunctionComment.MissingReturn" />
        <exclude name="TYPO3SniffPool.Commenting.FunctionComment.Missing" />
    </rule>

    <rule ref="Squiz.Commenting.DocCommentAlignment" />

    <!-- Control structures -->
    <rule ref="Generic.ControlStructures.InlineControlStructure" />
    <rule ref="Squiz.ControlStructures.ControlSignature" />
    <rule ref="TYPO3SniffPool.ControlStructures.DisallowElseIfConstruct" />
    <rule ref="TYPO3SniffPool.ControlStructures.DisallowEachInLoopCondition" />
    <rule ref="TYPO3SniffPool.ControlStructures.UnusedVariableInForEachLoop" />
    <rule ref="TYPO3SniffPool.ControlStructures.ExtraBracesByAssignmentInLoop" />

    <!-- Debug -->
    <rule ref="TYPO3SniffPool.Debug.DebugCode" />

    <!-- Files -->
    <rule ref="Generic.Files.OneClassPerFile" />
    <rule ref="Generic.Files.OneInterfacePerFile" />
    <rule ref="Generic.Files.ByteOrderMark" />
    <rule ref="Generic.Files.LineEndings" />
    <rule ref="Generic.Files.LineLength" />
    <rule ref="TYPO3SniffPool.Files.IncludingFile" />
    <rule ref="TYPO3SniffPool.Files.Filename">
        <exclude-pattern>ext_emconf.php</exclude-pattern>
        <exclude-pattern>ext_tables.php</exclude-pattern>
        <exclude-pattern>ext_localconf.php</exclude-pattern>
        <exclude-pattern>**/Configuration/**</exclude-pattern>
        <exclude-pattern>**/typo3conf/AdditionalConfiguration.*</exclude-pattern>
    </rule>
    <rule ref="TYPO3SniffPool.Files.Filename.Non-ClassFileFound">
        <exclude-pattern>ext_emconf.php</exclude-pattern>
        <exclude-pattern>ext_tables.php</exclude-pattern>
        <exclude-pattern>ext_localconf.php</exclude-pattern>
        <exclude-pattern>**/Configuration/**</exclude-pattern>
        <exclude-pattern>**/typo3conf/AdditionalConfiguration.*</exclude-pattern>
        <exclude-pattern>**/*Trait.php</exclude-pattern>
    </rule>

    <rule ref="TYPO3SniffPool.Files.FileExtension" />
    <rule ref="Zend.Files.ClosingTag" />

    <!-- Formatting -->
    <rule ref="Generic.Formatting.DisallowMultipleStatements" />

    <!-- Functions -->
    <rule ref="Generic.Functions.FunctionCallArgumentSpacing" />

    <!-- Loops -->

    <!-- NamingConventions -->
    <rule ref="TYPO3SniffPool.NamingConventions.ValidVariableName" />
    <rule ref="Generic.NamingConventions.ConstructorName" />
    <rule ref="TYPO3SniffPool.NamingConventions.ValidFunctionName" />

    <!-- Objects -->

    <!-- Operators -->

    <!-- PHP -->
    <rule ref="Generic.PHP.CharacterBeforePHPOpeningTag" />
    <rule ref="Generic.PHP.DisallowShortOpenTag" />
    <rule ref="Squiz.PHP.NonExecutableCode" />
    <rule ref="TYPO3SniffPool.PHP.DisallowMultiplePHPTags" />
    <rule ref="Generic.PHP.UpperCaseConstant">
        <exclude name="Generic.PHP.UpperCaseConstant.Found" />
    </rule>
    <rule ref="Generic.PHP.DeprecatedFunctions" />
    <rule ref="Squiz.PHP.Eval" />
    <rule ref="Squiz.PHP.GlobalKeyword" />

    <!-- Scope -->
    <rule ref="Squiz.Scope.MemberVarScope" />
    <rule ref="Squiz.Scope.MethodScope" />

    <!-- Strings -->
    <rule ref="TYPO3SniffPool.Strings.UnnecessaryStringConcat" />
    <rule ref="Squiz.Strings.DoubleQuoteUsage" />
    <rule ref="TYPO3SniffPool.Strings.ConcatenationSpacing" />

    <!-- Whitespace -->
    <rule ref="Squiz.WhiteSpace.SemicolonSpacing" />
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace" />
    <rule ref="Squiz.WhiteSpace.OperatorSpacing" />
    <rule ref="TYPO3SniffPool.WhiteSpace.NoWhitespaceAtInDecrement" />
    <rule ref="TYPO3SniffPool.WhiteSpace.ScopeClosingBrace">
        <!-- As it looks like the sniff doesn't work correctly. -->
        <exclude name="TYPO3SniffPool.WhiteSpace.ScopeClosingBrace.BreakIdent" />
    </rule>
    <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing" />

    <rule ref="PSR1.Files.SideEffects.FoundWithSymbols">
        <exclude-pattern>**/Tests/**/Bootstrap.php</exclude-pattern>
    </rule>
</ruleset>
